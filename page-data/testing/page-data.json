{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/testing","matchPath":"/testing/*","result":{"data":{"deck":{"id":"0fde0630-81aa-51c2-bfaa-9a5e114bcd33","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Testing Anti-Patterns\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Testing Private Methods\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public bool RegisterCustomer(string emailAddress /* other properties */)\\n{\\n    if (!ValidateEmailAddress(emailAddress)) return false;\\n\\n    /* further checks */\\n}\\n\\nprivate bool ValidateEmailAddress(emailAddress)\\n{ \\n    /* perform validation */\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Anti-Pattern - Make it public\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public bool ValidateEmailAddress(emailAddress)\\n{ \\n    /* perform validation */\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Option 1 - Test Public API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[Fact]\\npublic void RegisterCustomer_WhenEmailAddressIsMissingAtSign_ExpectFalse()\\n{\\n    // Arrange\\n    var emailAddress = \\\"info.something.com\\\";\\n\\n    // Act\\n    var actual = _sut.RegisterCustomer(emailAddress);\\n\\n    // Assert\\n    Assert.False(actual);\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Option 2 - Missing Abstraction\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class EmailAddress\\n{\\n    public EmailAddress(string emailAddress)\\n    {\\n        /* perform validation */\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Leaking Domain Logic into Tests\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Customer\\n{\\n    private string _forename;\\n    private string _surname;\\n\\n    public string FullName { get => $\\\"{_forename} {_surname}\\\";}\\n}\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Anti-pattern\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[Fact]\\npublic void FullName_ExpectCorrectFormat()\\n{\\n    // Arrange\\n    const string forename = \\\"John\\\";\\n    const string surname = \\\"Doe\\\";\\n\\n    // Act\\n    var customer = new Customer(forename, surname);\\n    var actual = customer.FullName;\\n\\n    // Assert\\n    Assert.Equal($\\\"{forename} {surname}\\\", actual);\\n}\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[Fact]\\npublic void FullName_ExpectCorrectFormat()\\n{\\n    // Arrange\\n    const string forename = \\\"John\\\";\\n    const string surname = \\\"Doe\\\";\\n\\n    // Act\\n    var customer = new Customer(forename, surname);\\n    var actual = customer.FullName;\\n\\n    // Assert\\n    Assert.Equal(\\\"John Doe\\\", actual);\\n}\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Conditional Flow in Tests\"), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Testing Anti-Patterns"}},"pageContext":{"matchPath":"/testing/*","id":"0fde0630-81aa-51c2-bfaa-9a5e114bcd33","slug":"/slides/testing","title":"Testing Anti-Patterns"}},"staticQueryHashes":[]}